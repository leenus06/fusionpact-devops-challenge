name: CI/CD Pipeline - Build, Test & Deploy

on:
  push:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker images
      run: |
        echo "Building Docker images..."
        docker-compose -f docker-compose.yml build
        echo "‚úÖ Docker images built successfully"
        
    - name: Test Services
      run: |
        echo "Starting services for testing..."
        docker-compose -f docker-compose.yml up -d
        sleep 10
        echo "Testing backend API..."
        curl -f http://localhost:8000/api/data || exit 1
        echo "‚úÖ Backend API test passed"
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Security Check
      run: |
        echo "üîí Running security scan..."
        if grep -r "AKIA" . --include="*.yml" --include="*.yaml" --include="*.py"; then
          echo "‚ùå SECURITY ISSUE: AWS keys found in code"
          exit 1
        else
          echo "‚úÖ No exposed AWS credentials found"
        fi

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
    
    - name: Deploy to EC2
      run: |
        echo "üöÄ Deploying to EC2..."
        ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "
          cd fusionpact-devops-challenge
          echo 'Stopping existing services...'
          docker-compose down || true
          echo 'Starting services...'
          docker-compose up -d
          sleep 20
          echo 'Testing deployment...'
          curl -f http://localhost/api/data && echo '‚úÖ Backend API working'
          curl -f http://localhost:8000/metrics && echo '‚úÖ Metrics endpoint working'
          curl -f http://localhost:80 && echo '‚úÖ Frontend working'
          echo 'üéâ Deployment completed successfully!'
        "

  health-check:
    runs-on: ubuntu-latest
    needs: deploy-to-ec2
    steps:
    - name: Final Health Check
      run: |
        echo "üè• Running final health checks..."
        EC2_HOST="${{ secrets.EC2_HOST }}"
        echo "1. Testing Frontend: http://$EC2_HOST"
        curl -f "http://$EC2_HOST" && echo "‚úÖ Frontend is healthy!"
        echo "2. Testing Backend: http://$EC2_HOST/api/data"
        curl -f "http://$EC2_HOST/api/data" && echo "‚úÖ Backend API is healthy!"
        echo "3. Testing Metrics: http://$EC2_HOST/api/metrics" 
        curl -f "http://$EC2_HOST/api/metrics" && echo "‚úÖ Metrics endpoint is healthy!"
        echo "üéâ All health checks passed!"
